Modello dati

Informazioni sulla persona

nome completo : stringa
indirizzo : composto da
    riga principale
    località
    CAP
    città

vincolo: si ipotizza un indirizzo italiano

professione : composto da
    ruolo : stringa
    settore : stringa

indirizzo email : stringa corrispondente ad un indirizzo email valido

------------------------------------
(C) Person
    name : string
    address : Address (C)
    profession : Profession (C)
    email : String

(C) Address
    mainLocation : String
    town : String
    postalCode : String
    city : String

(C) Profession
    role : String
    industry : String

-------------------------------------

Che cosa voglio fare:

pagina : form di inserimento dati
|
|
pagina : visualizzazione dati inseriti


quando dal form di inserimento dati vengono inviati i dati devono essere
eseguite le conversioni e le validazioni necessarie, dopodiché si crea il
semplice grafo di oggetti business lato server e poi si viene rediretti verso
la pagina di visualizzazione che mostra i dati inseriti. La visualizzazione
dovrebbe mostrare direttamente l'oggetto business.

------

Codifica

nome completo
    semplice stringa
        sottoposto a validazione per lunghezza minima
indirizzo
    riga1       |
    località    | (opzionale)
    CAP         |
    città
        sottoposto a conversione (che può far fallire la validazione)
professione
    elenco preconfigurato di coppie (settore, ruolo)
        valori predefiniti e tabellati
indirizzo email
    stringa
        sottoposto a validazione

--------------

immissione dati
invio del form
non ci saranno elementi di input con l'attributo immediate=true, quindi
    P(ARV) --> conversione da stringa a "oggetto business"
    P(VAL) --> validazione

[FATTO] DA SCRIVERE : convertitore custom per l'indirizzo
[FATTO] DA SCRIVERE : validatore per l'indirizzo email
[FATTO] DA SCRIVERE : system event listener che precarica le possibili
                      professioni



tutti questi valori, una volta convertiti e validati, verranno iniettati nel
bean di controllo  del form, e nel metodo di "action" del pulsante "submit"
saranno trasferiti al grafo di oggetti che vogliamo rappresentare nella
seconda pagina.


ATTENZIONE
Consideriamo il caso di una combobox che viene valorizzata con una lista di
oggetti SelectItem.

I vari SelectItem vengono renderizzati come elementi <option> con:
    - contenuto uguale alla proprietà itemLabel del SelectItem
    - attributo value uguale al toString() dell'oggetto referenziato dalla
    proprietà itemValue del SelectItem

Questo può creare problemi nel momento in cui la combobox inietta un oggetto
business nel bean sottostante. Se deve essere iniettata una String non ci
sono controindicazioni, poiché viene usato direttamente il valore dell'
attributo "value" dell'elemento option. Se si inietta un oggetto diverso, in
generale va usato un Converter per rendere la classe che si vuole usare
isomorfa alle stringhe.
Non è ancora sufficiente. Una volta eseguita la selezione e inviata la
richiesta, per questioni di sicurezza il runtime esegue un controllo sul tipo
di oggetto selezionato, per verificare che appartenga di fatto all'insieme
degli oggetti inizialmente proposti come disponibili nella combobox. E' quindi
STRETTAMENTE NECESSARIO che gli oggetti che si vogliono usare come elementi
della combobox implementino ALMENO I METODI EQUALS E HASHCODE, altrimenti il
controllo di consistenza fallisce, e si ottiene un messaggio di errore di
validazione anche quando si è scelto un elemento effettivamente presente nell'
insieme iniziale.


ATTENZIONE
Ho provato ad usare un SystemEventListener per modificare lo stile di un
componente a seguito della sua validazione. In particolare, un componente con
quel listener subisce una modifica al suo foglio di stile se la validazione
fallisce. Fallendo la validazione, il form viene riproposto; tuttavia se poi
vengono inseriti dati corretti, viene generata una NPE non gestita.
Questo errore non sembra essere direttamente correlato all'uso improprio o
errato del listener, ma dovrebbe dipendere da un errore di fondo dello stato
del modello in condizioni iniziali.
Il bean gestito Roster ha un riferimento a un oggetto Profession, che viene
valorizzato con i dati provenienti dal form una volta che conversioni e
validazioni sono terminate con successo. Poiché il bean ha àmbito di richiesta
esso viene rigenerato anche quando la richiesta precedente fallisce per un
errore di conversione o validazione... ma il problema non sembra essere qui.
Il problema sembra verificarsi quando si arriva alla fase di validazione, nel
momento in cui viene generato l'evento che dovrebbe stabilire il cambio di
valore dell'oggetto. Nell'evento di "changeValue" vengono passati i riferimenti
al vecchio valore e a quello nuovo (un classico, qualcosa di simile c'era anche
su Delphi). Quello nuovo è quello contenuto nella richiesta di postback, ma
quello vecchio è strano: è un oggetto Profession creato con il costruttore
predefinito. Questo significa che ANCHE negli oggetti business, in generale
è sempre bene (se non proprio obbligatorio) specificare uno stato iniziale.
Ma, prima, vediamo cosa succede nello specificare uno stato predefinito del
campo Profession imprimendolo dalla business logic (cioè dal bean). Non sembra
funzionare. Pare che lo stato iniziale sia determinato nella fase RestoreView,
in cui viene invocato il costruttore predefinito di Profession. Al che sarebbe
da provare l'impostazione forzata di un valore iniziale dall'interfaccia? Ma
non ha molto senso. E' molto più semplice (e operativamente corretto) assegnare
uno stato iniziale agli oggetti di una classe quando questa viene istanziata.

Morale della favola: il framework si occupa di istanziare i bean gestiti e
tutti i loro campi, ma se i campi sono oggetti non gestiti (non dichiarati con
@ManagedBean) essi vengono, sì, istanziati, ma internamente non avranno uno
stato definito. E' dunque responsabilità dello sviluppatore definire sempre
uno stato iniziale degli oggetti. [o in generale è sempre buona pratica].
